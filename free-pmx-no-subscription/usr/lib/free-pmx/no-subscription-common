#!/bin/bash

# SPDX-FileCopyrightText: Copyright 2025 free-pmx
# SPDX-License-Identifier: AGPL-3.0-only

source "/usr/lib/free-pmx/no-subscription-util" \
    || exit 255

declare_common() {

    : "${NS_WEB} ${NS_CONFIG}"

    declare -rg NS_WEB="<https://free-pmx.pages.dev/tools/free-pmx-no-subscription/>"
    declare -rg NS_CONFIG="/etc/free-pmx/no-subscription.conf"

}

declare_ns_globals() {

    : "${APTSRC_ID_LIST} ${APTSRC_ID_TO_TARGET} ${APTSRC_TARGET_TO_ID} ${APTSRC_ID_TO_TEMPL}"

    declare -rg APTSRC_ID_LIST=(pve pbs pmg ceph)

    declare -ra os_release_vars=(VERSION_ID VERSION_CODENAME)
    declare -A os_release
    source_kv "/etc/os-release" os_release "${os_release_vars[@]}" \
        && check_kv_allset os_release "${os_release_vars[@]}" \
        || return 1

    [[ ${os_release[VERSION_ID]} =~ ^[0-9]+$ ]] || return 1
    declare -r ext_formats=(sources list)
    declare -r ext="${ext_formats[((os_release[VERSION_ID] < 13))]}"

    declare -r aptsrc_d="/etc/apt/sources.list.d"

    declare -rgA APTSRC_ID_TO_TARGET=(
        [pve]="$aptsrc_d/pve-enterprise.$ext"
        [pbs]="$aptsrc_d/pbs-enterprise.$ext"
        [pmg]="$aptsrc_d/pmg-enterprise.$ext"
        [ceph]="$aptsrc_d/ceph.$ext"
    )

    declare -gA APTSRC_TARGET_TO_ID=()
    declare id
    for id in "${!APTSRC_ID_TO_TARGET[@]}"; do APTSRC_TARGET_TO_ID[${APTSRC_ID_TO_TARGET[$id]}]="$id"; done
    declare -rg APTSRC_TARGET_TO_ID

    declare -r templ_d="/usr/share/free-pmx/no-subscription-aptsrcs"

    declare -rgA APTSRC_ID_TO_TEMPL=(
        [pve]="$templ_d/pve-no-subscription.$ext.template"
        [pbs]="$templ_d/pbs-no-subscription.$ext.template"
        [pmg]="$templ_d/pmg-no-subscription.$ext.template"
        [ceph]="$templ_d/ceph-no-subscription.$ext.template"
    )

    declare -rgx FREE_PMX_DEBIAN="${os_release[VERSION_CODENAME]}"
    declare -rgx FREE_PMX_CEPH

    declare -rgx FREE_PMX_APTKEY_ORIGIN="https://enterprise.proxmox.com/debian/proxmox-release-$FREE_PMX_DEBIAN.gpg"
    declare -rgx FREE_PMX_APTKEY_LOCAL="/etc/apt/keyrings/proxmox-release-$FREE_PMX_DEBIAN.gpg"

    declare -rgx FREE_PMX_APTKEY=${FREE_PMX_APTKEY:-$FREE_PMX_APTKEY_LOCAL}

}

declare_nn_globals() {

    : "${PATCHDEF_ID_PREFIX_LIST} ${PATCHDEF_TARGET_LIST} ${PATCHDEF_TARGET_TO_IDS} ${PATCHDEF_DIR}"

    declare -i err=0

    declare -rga PATCHDEF_ID_PREFIX_LIST=(pwt pve pbs pmg)

    declare -ga PATCHDEF_TARGET_LIST=()
    declare -gA PATCHDEF_TARGET_TO_IDS=()

    declare -rg PATCHDEF_DIR="/usr/share/free-pmx/no-nag-patchdefs"

    declare id_prefix patchdef
    for id_prefix in "${PATCHDEF_ID_PREFIX_LIST[@]}"; do
        for patchdef in "$PATCHDEF_DIR/$id_prefix"*.patchdef; do
            declare -A pd
            source_kv "$patchdef" pd TARGET || {
                ((err |= 1))
                continue
            }
            [ -n "${pd[TARGET]}" ] || {
                ((err |= 2))
                continue
            }

            [[ "$patchdef" =~ ^${PATCHDEF_DIR}/(.*)\.patchdef ]] && {
                declare id=${BASH_REMATCH[1]}
                [[ -v PATCHDEF_TARGET_TO_IDS[${pd[TARGET]}] ]] \
                    || PATCHDEF_TARGET_LIST+=("${pd[TARGET]}")
                PATCHDEF_TARGET_TO_IDS[${pd[TARGET]}]+="$id;"
            }
        done
    done

    declare -rg PATCHDEF_TARGET_LIST
    declare -rg PATCHDEF_TARGET_TO_IDS

    return $((err))

}

init_run() {

    : "${O_AUTORUN} ${O_TARGET} ${ARGS}"

    [[ -n $1 ]] && declare -r conf_opt_check="$1" || return 255
    shift

    declare_common

    source "$NS_CONFIG" || :

    declare -gi O_AUTORUN=0
    declare -g O_TARGET=''
    declare -ga ARGS=()
    declare -i opt_invalid=0

    while getopts ":at:" opt; do
        case "$opt" in
        a)
            O_AUTORUN=1
            ;;
        t)
            [[ -z $O_TARGET ]] || opt_invalid=1
            O_TARGET=$OPTARG
            [[ -n $O_TARGET ]] || opt_invalid=1
            ;;
        *)
            opt_invalid=1
            ;;
        esac
    done

    declare -rg O_AUTORUN
    declare -rg O_TARGET

    ! ((opt_invalid)) || {
        print ERR "Invalid command option(s)."
        exit 1
    }

    shift $((OPTIND - 1))
    while (($# > 0)); do
        ARGS+=("$1")
        shift
    done

    declare -rg ARGS

    case "${!conf_opt_check}" in
    prohibit)
        print ERR "Prohibited by configuration: $NS_CONFIG"
        exit 0
        ;;
    manual)
        ! ((O_AUTORUN)) || {
            print ERR "Not configured to auto-run - option '$conf_opt_check': $NS_CONFIG"
            exit 0
        }
        ;;
    auto)
        ((O_AUTORUN)) && print OUT "Automatic run."
        ;;
    *)
        print ERR "Configuration invalid or missing: $NS_CONFIG"
        exit 1
        ;;
    esac

}

run_aptkey_check() {
    /usr/lib/free-pmx/aptkey-check "$@"
}

run_aptsrc_replace() {
    /usr/lib/free-pmx/aptsrc-replace "$@"
}

run_patchdef_apply() {
    /usr/lib/free-pmx/patchdef-apply "$@"
}
