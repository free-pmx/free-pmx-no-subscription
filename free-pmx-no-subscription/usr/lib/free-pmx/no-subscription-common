# SPDX-License-Identifier: AGPL-3.0-only

source "/usr/lib/free-pmx/no-subscription-util" 2> /dev/null \
|| { echo "Internal error, aborting." >&2; exit 1; }

declare_common() {

      declare -rg NS_CONFIG="/etc/free-pmx/no-subscription.conf"

}

declare_aptsrcs() {

      declare -rg ORD_APTSRC_IDS=("pve" "pbs" "pmg" "ceph")

      declare -A os_release
      source_kv "/etc/os-release" os_release VERSION_ID VERSION_CODENAME \
      && check_kv_allset os_release VERSION_ID VERSION_CODENAME \
      || return 1

      [[ ${os_release[VERSION_ID]} =~ ^[0-9]+$ ]] || return 1
      declare -r formats=(sources list)
      declare -rg APTSRC_FORMAT="${formats[(( os_release[VERSION_ID] < 13 ))]}"

      declare -r list_d="/etc/apt/sources.list.d"

      declare -rgA APTSRC_TARGETS=(
            ["pve"]="$list_d/pve-enterprise.$APTSRC_FORMAT"
            ["pbs"]="$list_d/pbs-enterprise.$APTSRC_FORMAT"
            ["pmg"]="$list_d/pmg-enterprise.$APTSRC_FORMAT"
            ["ceph"]="$list_d/ceph.$APTSRC_FORMAT"
      )

      declare -r templ_d="/usr/share/free-pmx/no-subscription-aptsrcs"

      declare -rgA APTSRC_TEMPLS=(
            ["pve"]="$templ_d/pve-no-subscription.$APTSRC_FORMAT.template"
            ["pbs"]="$templ_d/pbs-no-subscription.$APTSRC_FORMAT.template"
            ["pmg"]="$templ_d/pmg-no-subscription.$APTSRC_FORMAT.template"
            ["ceph"]="$templ_d/ceph-no-subscription.$APTSRC_FORMAT.template"
      )

      declare -rgx FREE_PMX_DEBIAN="${os_release[VERSION_CODENAME]}"
      declare -rgx FREE_PMX_CEPH

      declare -rgx FREE_PMX_APTKEY_SHARE="/usr/share/keyrings/proxmox-archive-keyring.gpg"
      declare -rgx FREE_PMX_APTKEY_LOCAL="/etc/apt/keyrings/proxmox-release-$FREE_PMX_DEBIAN.gpg"
      declare -rgx FREE_PMX_APTKEY_ORIGIN="https://enterprise.proxmox.com/debian/proxmox-release-$FREE_PMX_DEBIAN.gpg"

}

declare_patchdefs() {

      declare -i err=0

      declare -rga AVAIL_PATCH_TARGETS=(
            "/usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js"
            "/usr/share/pve-manager/js/pvemanagerlib.js"
            "/usr/share/pve-manager/touch/pvemanager-mobile.js"
            "/usr/share/javascript/proxmox-backup/js/proxmox-backup-gui.js"
            "/usr/share/javascript/pmg-gui/js/pmgmanagerlib.js"
      )

      declare -rg PATCHDEF_DIR="/usr/share/free-pmx/no-nag-patchdefs"

      declare -ga ORD_PATCHDEF_IDS=()
      declare -gA PATCHDEF_TARGETS

      for p in "${PATCHDEF_DIR}/"*.patchdef; do
            declare -A pd
            source_kv "$p" pd TARGET || { err=$(( err | 1 )); continue; }
            [ -z "${pd[TARGET]}" ] && { err=$(( err | 2 )); continue; }

            if [[ "$p" =~ ^${PATCHDEF_DIR}/(.*)\.patchdef ]]; then            
                  declare m=${BASH_REMATCH[1]}
                  ORD_PATCHDEF_IDS+=("$m")
                  PATCHDEF_TARGETS["$m"]="${pd[TARGET]}" 
            fi
      done

      declare -rg ORD_PATCHDEF_IDS
      declare -rg PATCHDEF_TARGETS

      return $err

}

init() {

      declare -r conf_opt_check="$1"
      shift

      declare_common

      source "$NS_CONFIG" 2> /dev/null ||:

      declare -gi O_AUTORUN=0
      declare -g O_TARGET=''
      declare -ga ARGS=()

      declare -i opt_t_multiple=0
      declare -i opt_invalid=0

      while getopts ":at:" opt; do
      case "$opt" in
            a) O_AUTORUN=1;;
            t) [[ -z $O_TARGET ]] || opt_t_multiple=1; O_TARGET=$OPTARG;;
            *) opt_invalid=1;;
      esac
      done

      case "${!conf_opt_check}" in
      prohibit)
            { echo "Prohibited by configuration: $NS_CONFIG" >&2; exit; };;
      manual)
            (( O_AUTORUN == 0 )) \
            || { echo "Not configured to auto-run - option '$conf_opt_check': $NS_CONFIG" >&2; exit; };;
      auto)
            (( O_AUTORUN == 1 )) \
            && echo "Automatic run.";;
      *)
            { echo "Configuration invalid or missing: $NS_CONFIG" >&2; exit 1; };;
      esac

      (( opt_t_multiple == 0 )) \
      || { echo "Multiple '-t' options not supported."; exit 1; }
      (( opt_invalid == 0 )) \
      || { echo "Invalid command option." >&2; exit 1; }

      { shift $((OPTIND-1)); while (($# > 0)); do ARGS+=("$1"); shift; done; }

      declare -rg O_AUTORUN
      declare -rg O_TARGET
      declare -rg ARGS

}

run_rl_replace() { /usr/lib/free-pmx/repo-list-replace "$@"; }
run_rk_check() { /usr/lib/free-pmx/repo-key-check "$@"; }
run_pd_apply() { /usr/lib/free-pmx/patchdef-apply "$@"; }
