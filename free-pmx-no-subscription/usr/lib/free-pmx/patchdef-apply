#!/bin/bash

# SPDX-FileCopyrightText: Copyright 2025 free-pmx
# SPDX-License-Identifier: AGPL-3.0-only

declare -i status=0

source "/usr/lib/free-pmx/no-subscription-util" \
    && init_out \
    || exit 255

[[ -n $1 ]] && declare -r patchdef=$1 || exit 1
declare -r bak_ext=$2

declare -ra pd_vars=(DISPLAY TARGET PACKAGE SINCE)
declare -A pd
source_kv "$patchdef" pd "${pd_vars[@]}" \
    && check_kv_allset pd "${pd_vars[@]}" \
    || {
        print ERR "! Corrupt patch definition: $patchdef"
        exit $((status |= 1))
    }

[[ -f ${pd[TARGET]} ]] || {
    print ERR "! File to patch not present for: ${pd[DISPLAY]}"
    exit $((status |= 2))
}

declare pver
pver=$(deb_last_le_version "${pd[PACKAGE]}" "${pd[SINCE]}") || {
    print ERR "! Cannot determine appropriate patch version: $patchdef"
    exit $((status |= 4))
}

[[ ${patchdef##*/} =~ ^([a-z]+-[0-9]+)- ]]
declare pid_prefix=${BASH_REMATCH[1]}
declare pdesc="[$pid_prefix|$pver] ${pd[DISPLAY]}"

declare pblock="${patchdef%*.patchdef}.$pver"

declare -A _praw
slurp "$pblock".orig '_praw[ORIG]' && slurp "$pblock".repl '_praw[REPL]' \
    || {
        print ERR "! Error loading patch raw blocks: $pdesc"
        exit $((status |= 4))
    }

if [[ -n $bak_ext ]]; then
    cp "${pd[TARGET]}"{,."$bak_ext"} || {
        print ERR "! Unable to make a '.$bak_ext' copy: ${pd[TARGET]}"
    }
fi

declare tfile checksum_prior checksum_after

checksum_prior=$(checksum "${pd[TARGET]}")

: \
    && tfile=$(mktemp "${pd[TARGET]}"-patched-XXXXXX) \
    && chmod 644 "$tfile" \
    && subst_rawblock _praw < "${pd[TARGET]}" > "$tfile" \
    && mv -f "$tfile" "${pd[TARGET]}" \
    || {
        print ERR "! Error during patch application: $pdesc"
        exit $((status |= 2))
    }

checksum_after=$(checksum "${pd[TARGET]}")

if [[ -z $checksum_prior ]] || [[ -z $checksum_after ]]; then
    print OUT "? Unknown result: $pdesc"
    ((status |= 4))
elif [[ $checksum_prior == "$checksum_after" ]]; then
    print OUT "- NO effect: $pdesc"
    ((status |= 8))
else
    print OUT "+ OK: $pdesc"
fi

exit $((status))
